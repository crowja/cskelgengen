#! /bin/bash

# Probably want to change names "CLASS_NAME" and
# "$class_name" and so forth to "PKG_NAME" and "pkg_name"
# to make a bit more sense in the context of non-classgen
# generators.

COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_NC='\033[0m' # No Color

####

# TODO ... remove the function stub stuff ...
function stub {
  while read l
  do
    l=$(echo "$l" | sed 's/#.*//g')   # removes comments
    tokens=( $l )
    s=${tokens[0]}
    d=${tokens[1]}
    # Next line requires Bash's extended testing, [[...]]
    if [ "$s" != "" ] && [ "$d" != "" ] && [[ "$s" != "#*" ]] && [ -f "$s" ]
    then
      name=`basename ${tokens[0]}`
      mkdir -p build/${bundle}/$d
      cat $s \
      | sed -e"s/%BUNDLE_VERSION%/${version}/" \
      | sed -e"s/%BUNDLE_NAME%/${package_name}/" \
      | sed -e"s/%AUTHOR_NAME%/${package_author_name}/" \
      | sed -e"s/%AUTHOR_EMAIL%/${package_author_email}/" \
      | sed -e"s/%AUTHOR_AFFILIATION%/${package_author_affiliation}/" \
      | sed -e"s/%TODAY%/${date_today}/" \
      | sed -e"s/%COPYRIGHT%/Copyright ${year} ${package_author_name}. All rights reserved./" \
      > build/${bundle}/${d}/$name
    fi
  done < MANIFEST
}

####

function write_header {
  skel=$1
  progfile=$2
  
  echo "Entered write_header()"
  #skelgen_version=`date +"%s"`
  skelgen_version="0.8.1-dev0"
  skelgen_version_date=`date +"%c"`
  
  if [ -f "$skel/HEADER.bash" ]
  then
    echo "Writing ${skel}/HEADER.bash to $progfile"
    cat "$skel/HEADER.bash" \
    | sed -e"s/%VERSION%/${skelgen_version}. ${skelgen_version_date}/" \
    > $progfile
  else
    echo "Touching $progfile"
    touch $progfile
  fi
  
  chmod 775 $progfile
}

####

function write_from_manifest {
  skel=$1
  progfile=$2
  
  if [ ! -f "${skel}/MANIFEST" ]
  then
    echo "MANIFEST for ${skel} not found."
    return 1
  fi
  
  echo "Trying to read ${skel}/MANIFEST"
  
  while read l
  do
    l=$(echo "$l" | sed 's/#.*//g')   # removes comments
    tokens=( $l )
    s=${tokens[0]}
    d=${tokens[1]}
    #if [ "$s" != "" ] && [ "$d" != "" ] && [[ "$s" != "#*" ]] && [ -f "$s" ]
    #then
    #    name=`basename ${tokens[0]}`   # could replace with $s
    #fi
    if [ "$s" != "" ]
    then
      fname=`basename ${tokens[0]}`
      dname=`dirname ${tokens[0]}`
      echo "$dname --> $fname"
      echo -e "\n### $s\n" >> $progfile
      echo -e "mkdir -p \${class_name}/$dname\n" >> $progfile
      
      cat >> $progfile <<'_WRAP_OPEN'
(
cat <<'_TEXT'
_WRAP_OPEN
      
      cat ${skel}/$s >> $progfile
      
      cat >> $progfile <<'_WRAP_CLOSE'
_TEXT
) \
| sed -e"s/TMPL_CLASS_NAME_UC/${class_name_uc}/g" \
| sed -e"s/TMPL_CLASS_NAME/${class_name}/g" \
| sed -e"s/TMPL_CLASS_TAG/${class_tag}/g" \
| sed -e"s/TMPL_CLASS_VERSION/${class_version}/g" \
_WRAP_CLOSE
      
      ss=$(echo "$s" | sed "s/^TMPL_CLASS_NAME/\${class_name}/")
      echo -e "> \${class_name}/$ss" >> $progfile
    fi
  done < ${skel}/MANIFEST
  
}

####

function mkgen {
  
  if [ -z "$1" ]
  then
    return 1
  fi
  
  skel="skeletons/"$1
  dest="build"
  mkdir -p ${dest}
  
  progname="$1"gen-"0.8.1-dev0"
  progfile="${dest}/${progname}"
  
  write_header ${skel} ${progfile}
  write_from_manifest ${skel} ${progfile}
  
  # Catch error codes TODO
}

####

function main {
  
  
  if [ -f "skeletons/$1/MANIFEST" ]
  then
    mkgen $1
    if [ $? ]
    then
      echo -e "${COLOR_GREEN}SUCCESS:${COLOR_NC} ${1}gen-0.8.1-dev0 built."
    fi
  else
    echo -e "${COLOR_RED}FAILED:${COLOR_NC} skeletons/$1/MANIFEST not found."
  fi
}

####

main "$@"
